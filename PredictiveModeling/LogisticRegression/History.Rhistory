gc <- read.csv("~/R/PASS/PredictiveModeling/LogisticRegression/GermanCredit.csv")
View(gc)
head(gc)
summary(gc)
?xtabs
xtabs(~response+chk_acct)
xtabs(~response+chk_acct, data=gc)
xtabs(~RESPONSE+chk_acct, data=gc)
xtabs(~RESPONSE+CHK_ACCT, data=gc)
xtabs(~RESPONSE+CHK_ACCT+OWN_RES, data=gc)
xtabs(~RESPONSE+CHK_ACCT, data=gc)
xtabs(~RESPONSE ., data=gc)
xtabs(RESPONSE ~ ., data=gc)
?table
?with
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc )
logit
gc$PRESENT_RESIDENT <- factory(gc$PRESENT_RESIDENT)
gc$PRESENT_RESIDENT <- factor(gc$PRESENT_RESIDENT)
gc$JOB <- factor(gc$JOB)
logit2 <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc )
logit2
logit1
logit
gc$JOB
summary(logit2)
?glm
logit3 <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc, family="binomial")
summary(logit3)
confint(logit3)
set.seed(21275)
n <- nrow(gc)
gc.nrows <- nrow(gc)
n <- nrow(gc)
a <- sort(sample(1:n, floor(n*.6)))
gc.train <- gc[a]
gc.train <- gc[a,]
gc.test <- gc[-a,]
head(gc.train)
?glm
?prediction
library(ROCR)
install.packages("ROCR")
library(ROCR)
?prediction
ROCR.simple
prediction(logit3)
prediction(logit3, labels=c('N', 'Y'))
prediction(logit3, labels=RESPONSE
)
prediction(logit3, labels=RESPONSE)
prediction(logit3, labels=gc$RESPONSE)
prediction(logit3, labels=gc.test$RESPONSE)
prediction(logit3(gc.test), labels=gc.test$RESPONSE)
prediction(logit3, labels=gc.test$RESPONSE)
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc, family=binomial("logit"))
logit
summary(logit)
plot(logit)
?predict
<- predict(logit, data=gc.test)
p <- predict(logit, data=gc.test)
p
summary(p)
prediction(p)
p
logit
logit()
logit(3)
logit(c(3))
logit(3)
logit(gc.test)
prediction(p)
?prediction
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train, family=binomial("logit"))
logit
xtabs(RESPONSE~CHK_ACT, data=gc.train)
gc.train
head(gc.train)
xtabs(~RESPONSE+CHK_ACT, data=gc.train)
xtabs(~RESPONSE+CHK_ACCT, data=gc.train)
xtabs(RESPONSE~CHK_ACCT, data=gc.train)
xtabs(~RESPONSE+CHK_ACCT, data=gc.train)
xtabs(~RESPONSE + CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train
)
xtabs(~RESPONSE + CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train)
xtabs(~RESPONSE + CHK_ACCT, data=gc.train)
xtabs(~RESPONSE + CHK_ACCT+DURATION, data=gc.train)
xtabs(~RESPONSE + RESPONSE, data=gc.train)
xtabs(RESPONSE~RESPONSE, data=gc.train)
xtabs(~RESPONSE + RESPONSE, data=gc.train)
xtabs(~RESPONSE ~ RESPONSE +RESPONSE, data=gc.train)
xtabs(~RESPONSE RESPONSE +RESPONSE, data=gc.train)
xtabs(~RESPONSE+RESPONSE, data=gc.train)
library(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(gc.train$RESPONSE, gc.train$RESPONSE)
logit
p.train <- predict(logit, data=gc.train)
p.test <- predict(logit, data=gc.test)
CrossTable(gc.train$RESPONSE, p.train$RESPONSE)
p.train
p[1]
gc.train$PRESENT_RESIDENT <- factor(gc.train$PRESENT_RESIDENT)
gc.train$JOB <- factor(gc.train$JOB)
gc.train$RESPONSE <- factor(gc.train$RESPONSE)
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train, family=binomial("logit"))
summary(logit)
predict(logit, data=gc.test)
gc.train$CHK_ACCT <- factor(gc.train$CHK_ACCT)
gc.train$PRESENT_RESIDENT <- factor(gc.train$PRESENT_RESIDENT)
gc <- read.csv("~/R/PASS/PredictiveModeling/LogisticRegression/GermanCredit.csv")
gc.train$PRESENT_RESIDENT <- factor(gc.train$PRESENT_RESIDENT)
gc.train$CHK_ACCT <- factor(gc.train$CHK_ACCT)
gc.train$HISTORY <- factor(gc.train$HISTORY)
gc.train$SAV_ACCT <- factor(gc.train$SAV_ACCT)
gc.train$EMPLOYMENT <- factor(gc.train$EMPLOYMENT)
gc.train$JOB <- factor(gc.train$JOB)
gc.train$JOB <- factor(gc.train$RESPONSE)
gc.train$JOB <- factor(gc.train$JOB)
gc.train$RESPONSE <- factor(gc.train$RESPONSE)
gc <- read.csv("~/R/PASS/PredictiveModeling/LogisticRegression/GermanCredit.csv")
gc$RESPONSE <- factor(gc.train$RESPONSE)
gc$RESPONSE <- factor(gc$RESPONSE)
gc$JOB <- factor(gc$JOB)
gc$EMPLOYMENT <- factor(gc$EMPLOYMENT)
gc$SAV_ACCT <- factor(gc$SAV_ACCT)
gc$HISTORY <- factor(gc$HISTORY)
gc.train$CHK_ACCT <- factor(gc$CHK_ACCT)
gc$CHK_ACCT <- factor(gc$CHK_ACCT)
head(gc)
gc
summary(gc)
gc$PRESENT_RESIDENT <- factor(gc$PRESENT_RESIDENT)
summary(gc)
set.seed(21275)
n <- nrow(gc)
gc.nrows <- nrow(gc)
n <- nrow(gc)
a <- sort(sample(1:n, floor(n*.6)))
gc.train <- gc[a]
gc.train <- gc[a,]
gc.test <- gc[-a,]
head(gc.train)
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train, family=binomial("logit"))
summary(logit)
predict(logit, data=gc.test)
?odds
?odd
p <- predict(logit, data=gc.test)
plot(logit)
p[1,]
p[1]
p[2]
View(gc.test)
p[2]
p[1]
p[3]
p[4]
p[5]
p[6]
logit <- glm(RESPONSE ~ CHK_ACCT+DURATION+HISTORY+NEW_CAR+USED_CAR+FURNITURE+RADIO.TV+EDUCATION+RETRAINING+AMOUNT+SAV_ACCT+EMPLOYMENT+INSTALL_RATE+MALE_DIV+MALE_SINGLE+MALE_MAR_or_WID+CO.APPLICANT+GUARANTOR+PRESENT_RESIDENT+REAL_ESTATE+PROP_UNKN_NONE+AGE+OTHER_INSTALL+RENT+OWN_RES+NUM_CREDITS+JOB+NUM_DEPENDENTS+TELEPHONE+FOREIGN, data=gc.train, family=binomial("logit"))
logit
summary(logit)
confint(logit)
predict(logit, type="response")
predict(logit, type="response")/
)
?predict
response
residuals(logit)
residuals(logit, type="deviance")
p.train <- predict(logit, type="response")
View(p.train)
colbind
?cbind
p[2]
?prediction
?sapply
sapply(p.train$x, function(y) { ifelse(y<.5,'N', 'Y') })
sapply(p.train, function(y) { ifelse(y<.5,'N', 'Y') })
p.train.vals <- sapply(p.train, function(y) { ifelse(y<.5,'N', 'Y') })
p.train.vals
p.train.vals <- sapply(p.train, function(y) { ifelse(y<.5,0, 1) })
p.train.vals
CrossTable(p.train.vals, p.train$RESPONSE)
CrossTable(p.train.vals, gc.train$RESPONSE)
CrossTable(gc.train$RESPONSE, p.train.vals)
logit(gc.test)
warnings()
p.test <- predict(logit, gc.test, type="response")
p.test
p.test.vals <- sapply(p.test, function(y) { ifelse(y<.5,0, 1) })
p.test.vals
save.image("~/R/PASS/PredictiveModeling/LogisticRegression/Workspace.RData")
CrossTable(gc.test$RESPONSE, p.test.vals)
?CrossTable
CrossTable(gc.test$RESPONSE, p.test.vals, format="SPSS")
CrossTable(gc.test$RESPONSE, p.test.vals, dnn = c("Actual", "Predicted"))
install.packages("pROC")
library(pROC)
?plot.roc
?roc
roc(gc.test$RESPONSE, p.test.vals)
roc(gc.test$RESPONSE, p.test.vals, plot=TRUE)
roc(gc.test$RESPONSE, p.test.vals, smooth=TRUE, plot=TRUE)
roc(gc.test$RESPONSE, p.test.vals, plot=TRUE)
roc(gc.test$RESPONSE, fitted(logit), plot=TRUE)
?fitted
roc(gc.test$RESPONSE, p.test.vals, plot=TRUE)
roc(gc.test$RESPONSE, fitted(logit), plot=TRUE)
roc(gc.train$RESPONSE, fitted(logit), plot=TRUE)
roc(gc.test$RESPONSE, fitted(p.test), plot=TRUE)
roc(gc.train$RESPONSE, fitted(logit), plot=TRUE)
predict(logit, data=gc.test, type="response")
p.rocr <- prediction(predict(logit, data=gc.test, type="response"))
gc.test$RESPONSE
p.rocr <- prediction(predict(logit, data=gc.test, type="response"), gc.test$RESPONSE)
nrow(gc.test)
nrow(gc.test$RESPONSE)
gc.test$RESPONSE)\
gc.test$RESPONSE
length(gc.test$RESPONSE)
predict(logit, data=gc.test, type="response")
p.test
nrows(p.test)
nrow(p.test)
length(p.test)
predict(logit, data=p.test, type="response")
p.rocr <- prediction(p.test, gc.test$RESPONSE)
p.perf <- performance(p.rocr, "A", "B")
p.perf <- performance(p.rocr, "tpr", "fpt")
p.perf <- performance(p.rocr, "tpr", "fpr")
plot(perf)
plot(p.perf)
plot(pred)
plot(p.rocr)
plot(p.perf, main="lift curve", colorize=T)
p.rocr <- prediction(p.test, gc.test$RESPONSE)
p.rocr.roc <- performance(p.rocr, "tpr", "fpr")
p.rocr.lift <- performance(p.rocr, "lift", "rpp")
plot(p.rocr.lift, main="lift curve", colorize=T)
plot(p.rocr.roc, main="ROC curve", colorize=T)
savehistory("~/R/PASS/PredictiveModeling/LogisticRegression/History.Rhistory")
save.image("~/R/PASS/PredictiveModeling/LogisticRegression/Workspace.RData")
CrossTable(gc.test$RESPONSE, p.test.vals, dnn = c("Actual", "Predicted"))
p.test <- predict(logit, gc.test, type="response")
\includegraphics[width=0.98\textwidth]{LiftCurve.pdf}
plot(p.rocr.lift, main="Lift Curve", colorize=T)
class(CrossTable)
cCrossTable
CrossTable
?CrossTable
netprof <- function(cutoff) {}
netprof <- function(cutoff) {
.test, function(y) { ifelse(y<.8,0, 1) })p.test.vals <- sapply(p.test, function(y) { ifelse(y<.5,0, 1) })
class(p.test)
f<-function(vals, cutoff) {
pvals <- sapply(vals, function(y) { ifelse(y<cutoff,0, 1) })
ls
}
ls
ct <- CrossTable(gc.test$RESPONSE, p.test.vals)
aggregate(ct)
aggregate(ct, mean)
aggregate(ct, FUN=mean)
aggregate(ct,
FUN=mean)
ct.tbl
ct.prop.tbl
ct
ct$prop.tbl
ct$t
ct$t[0,1]
ct$t[1,1]
ct$t[1,2]
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
profitFromCrossTable(ct)
}
profitFromCrossTable <- function(ct) {
profit <- ct$t[1,1] * 100
loss <- ct$t[1,2] * -500
profit - loss
}
s <- seq(0,1, by = .1)
for(i in s) {}
for(i in s) {
calcNetProfits(gc.test$RESPONSE, p.test, i)
}
for(i in s) {
calcNetProfit(gc.test$RESPONSE, p.test, i)
}
ct$t
for(i in s) {
calcNetProfit(gc.test$RESPONSE, p.test, .80)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit(gc.test$RESPONSE, p.test, .90)
calcNetProfit(gc.test$RESPONSE, p.test, .80)
profitFromCrossTable <- function(ct) {
profit <- ct$t[1,1] * 100
loss <- ct$t[1,2] * -500
print("Profit with cutoff", cutoff)
profit - loss
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff", cutoff)
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
c("Profit with cutoff", cutoff)
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print(c("Profit with cutoff", cutoff)
profitFromCrossTable(ct)
}
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print(c("Profit with cutoff", cutoff))
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print(c("Profit with cutoff", cutoff))
profitFromCrossTable(ct)
}
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"+cutoff)
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff")
profitFromCrossTable(ct)
}
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff")
profitFromCrossTable(ct)
}
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfits
calcNetProfit
calcNetProfits()
calcNetProfit()
calcNetProfit(g.test$RESPONSE)
calcNetProfit(g.test$RESPONSE, p.test, .80)
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
cat("Profit with cutoff"); cat(cutoff);
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfit <- function(facts, preds, cutoff) {
vals <- sapply(preds, function(y) { ifelse(y<cutoff,0, 1) })
ct <- CrossTable(facts, vals, dnn = c("Actual", "Predicted"))
print("Profit with cutoff"); cutoff
profitFromCrossTable(ct)
}
calcNetProfit(gc.test$RESPONSE, p.test, .80)
profitFromCrossTable(ct)
}
source('~/R/PASS/PredictiveModeling/LogisticRegression/Fucntions.R')
}
source('~/R/PASS/PredictiveModeling/LogisticRegression/Fucntions.R')
calcNetProfit(gc.test$RESPONSE, p.test, .80)
calcNetProfit(gc.test$RESPONSE, p.test, .90)
calcNetProfit(gc.test$RESPONSE, p.test, .95)
calcNetProfit(gc.test$RESPONSE, p.test, .75)
for(i in s) {
}
for(i in s) { calcNetProfit(gc.test$RESPONSE, r.test, i) }
for(i in s) { calcNetProfit(gc.test$RESPONSE, p.test, i) }
source('~/R/PASS/PredictiveModeling/LogisticRegression/Fucntions.R')
for(i in s) { calcNetProfit(gc.test$RESPONSE, p.test, i) }
s <- seq(.1,1, by = .1)
for(i in s) { calcNetProfit(gc.test$RESPONSE, p.test, i) }
for(i in s) { print(calcNetProfit(gc.test$RESPONSE, p.test, i)) }
s <- seq(.1,.9, by = .1)
for(i in s) { print(calcNetProfit(gc.test$RESPONSE, p.test, i)) }
ct
ct$t
66*100
41*-500
ct$[1,1]
ct$t[1,1]
ct$t[1,2]
ct$t[2,1'']
ct$t[2,1]
source('~/R/PASS/PredictiveModeling/LogisticRegression/Fucntions.R')
for(i in s) { print(calcNetProfit(gc.test$RESPONSE, p.test, i)) }
install.packages("neuralnet")
savehistory("~/R/PASS/PredictiveModeling/LogisticRegression/History.Rhistory")
